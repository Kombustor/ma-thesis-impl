// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // If it's not in node_modules it throws an error
  output   = "../../../node_modules/@prisma/client-platform"
}

generator zod {
  provider = "zod-prisma"
  output   = "../models"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== Admin Users ==========

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ========== Email Whitelist ==========

model EmailWhitelist {
  /// @zod.uuid().optional()
  id    String @id @default(uuid())
  /// @zod.min(1, {message: "name must not be empty"})
  name  String
  /// @zod.email()
  email String @unique

  createdAt DateTime @default(now())
}

// ========== Article ==========

model Article {
  /// @zod.uuid()
  id                 String   @id @default(uuid())
  title              String
  sitename           String
  author             String
  date               DateTime
  source             String   @unique
  inferenceAvailable Boolean  @default(false)
  topic              String?

  coverImage   CoverImage? @relation(fields: [coverImageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  coverImageId String?
  contents     Content[]

  // Quality standards
  biasPercentage Float?
  credibleSource Boolean?
  omitsOpinion   Boolean?

  createdAt DateTime @default(now())
}

model CoverImage {
  /// @zod.uuid()
  id String @id @default(uuid())

  src         String
  blurDataURL String
  width       Int
  height      Int
  type        String?

  Article Article[]
}

model Content {
  /// @zod.uuid()
  id             String   @id @default(uuid())
  indexInArticle Int
  // @zod.optional()
  paragraphIndex Int?
  htmlType       HtmlType
  biased         Boolean?
  groundTruthBiased Boolean    @default(false)
  text           String

  Article   Article?   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String?
  Feedback  Feedback[]
}

enum HtmlType {
  H1
  H2
  H3
  SPAN
}

// ========== Study Participants ==========

model Participant {
  id                    String  @id @default(uuid())
  dataProcessingConsent Boolean @default(false)

  browserSignature String     @unique
  Feedback         Feedback[]

  createdAt DateTime @default(now())
}

model Feedback {
  id String @id @default(uuid())

  Participant   Participant? @relation(fields: [participantId], references: [id], onDelete: Cascade)
  participantId String
  Content       Content      @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId     String
  // This is the participant's opinion if the sentence is biased or not
  biased        Boolean

  /// @zod.max(100, {message: "reason must not be longer than 100 characters"})
  reason        String?

  createdAt DateTime @default(now())

  @@unique([participantId, contentId])
}
